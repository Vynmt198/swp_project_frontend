import React, { useState } from "react";

const mockHistory = [
  { id: 1, date: "2025-04-10", type: "Kh√°m ƒë·ªãnh k·ª≥", description: "Kh√°m s·ª©c kh·ªèe t·ªïng qu√°t, x√©t nghi·ªám CD4 v√† t·∫£i l∆∞·ª£ng virus." },
  { id: 2, date: "2025-03-02", type: "ƒê∆°n thu·ªëc", description: "ARV: TDF + 3TC + EFV. C·∫•p thu·ªëc 1 th√°ng." },
  { id: 3, date: "2025-01-15", type: "T∆∞ v·∫•n ƒëi·ªÅu tr·ªã", description: "T∆∞ v·∫•n tu√¢n th·ªß ƒëi·ªÅu tr·ªã v√† dinh d∆∞·ª°ng." },
  { id: 4, date: "2024-12-05", type: "X√©t nghi·ªám m√°u", description: "X√©t nghi·ªám CD4: 500 cells/mm¬≥, t·∫£i l∆∞·ª£ng virus: d∆∞·ªõi ng∆∞·ª°ng ph√°t hi·ªán." },
  { id: 5, date: "2024-10-20", type: "Kh√°m ƒë·ªãnh k·ª≥", description: "T√°i kh√°m ƒë·ªãnh k·ª≥, kh√¥ng c√≥ d·∫•u hi·ªáu b·∫•t th∆∞·ªùng." },
  { id: 6, date: "2024-08-12", type: "ƒê∆°n thu·ªëc", description: "ARV: AZT + 3TC + NVP. ƒê·ªïi ph√°c ƒë·ªì do t√°c d·ª•ng ph·ª•." },
  { id: 7, date: "2024-07-01", type: "T∆∞ v·∫•n t√¢m l√Ω", description: "T∆∞ v·∫•n h·ªó tr·ª£ tinh th·∫ßn, gi·∫£m lo √¢u v√† k·ª≥ th·ªã b·∫£n th√¢n." },
  { id: 8, date: "2024-05-23", type: "T∆∞ v·∫•n ƒëi·ªÅu tr·ªã", description: "T∆∞ v·∫•n c·∫£i thi·ªán ch·∫ø ƒë·ªô ƒÉn u·ªëng v√† luy·ªán t·∫≠p." },
  { id: 9, date: "2024-04-10", type: "Kh√°m kh·∫©n c·∫•p", description: "S·ªët cao, nghi ng·ªù nhi·ªÖm tr√πng c∆° h·ªôi. ƒê√£ ƒëi·ªÅu tr·ªã b·∫±ng kh√°ng sinh." },
  { id: 10, date: "2024-02-18", type: "X√©t nghi·ªám m√°u", description: "X√©t nghi·ªám ƒë·ªãnh k·ª≥: CD4 tƒÉng l√™n 600, t·∫£i l∆∞·ª£ng ·ªïn ƒë·ªãnh." },
];

export default function History() {
  const today = new Date().toISOString().split("T")[0];
  const [fromDate, setFromDate] = useState("");
  const [toDate, setToDate] = useState("");
  const [searchInput, setSearchInput] = useState("");
  const [isFiltered, setIsFiltered] = useState(false);

  const isInvalidRange = toDate && new Date(toDate) > new Date(today);

  const updateFilterState = (from, to, search) => {
    setIsFiltered(from.trim() !== "" || to.trim() !== "" || search.trim() !== "");
  };

  const handleFilterChange = (setter, field) => (e) => {
    const value = e.target.value;
    setter(value);
    updateFilterState(
      field === "from" ? value : fromDate,
      field === "to" ? value : toDate,
      searchInput
    );
  };

  const handleSearchChange = (e) => {
    const value = e.target.value;
    setSearchInput(value);
    updateFilterState(fromDate, toDate, value);
  };

  const filterByDateAndSearch = (entries) => {
    return entries.filter((entry) => {
      const entryDate = new Date(entry.date);
      const inRange =
        (!fromDate || entryDate >= new Date(fromDate)) &&
        (!toDate || entryDate <= new Date(toDate));
      const trimmedSearch = searchInput.trim();
      if (trimmedSearch !== "") {
        const matchesSearch =
          entry.id.toString() === trimmedSearch || entry.date === trimmedSearch;
        return inRange && matchesSearch;
      }
      return inRange;
    });
  };

  const filteredData = isInvalidRange ? null : filterByDateAndSearch(mockHistory);

  return (
    <div className="max-w-4xl mx-auto p-6 font-sans text-[15px]">
      <h2 className="text-3xl font-bold mb-1" style={{ color: "oklch(0.577 0.245 27.325)" }}>
        L·ªãch s·ª≠ kh√°m & ƒëi·ªÅu tr·ªã
      </h2>
      <p className="text-gray-600 mb-6">Xem l·∫°i c√°c l·∫ßn kh√°m, ƒë∆°n thu·ªëc v√† qu√° tr√¨nh ƒëi·ªÅu tr·ªã HIV</p>

      <div className="flex flex-wrap gap-6 mb-6">
        <div className="flex flex-col">
          <label className="text-sm font-medium text-gray-700 mb-1">T·ª´ ng√†y</label>
          <input
            type="date"
            value={fromDate}
            onChange={handleFilterChange(setFromDate, "from")}
            max={today}
            className="border border-gray-300 rounded px-3 py-2 text-sm shadow-sm"
          />
        </div>
        <div className="flex flex-col">
          <label className="text-sm font-medium text-gray-700 mb-1">ƒê·∫øn ng√†y</label>
          <input
            type="date"
            value={toDate}
            onChange={handleFilterChange(setToDate, "to")}
            max={today}
            className="border border-gray-300 rounded px-3 py-2 text-sm shadow-sm"
          />
        </div>
        <div className="flex flex-col flex-1 min-w-[200px]">
          <label className="text-sm font-medium text-gray-700 mb-1">Nh·∫≠p ID ho·∫∑c ng√†y</label>
          <input
            type="text"
            placeholder="VD: 1 ho·∫∑c YYYY-MM-DD"
            value={searchInput}
            onChange={handleSearchChange}
            className="border border-gray-300 rounded px-3 py-2 text-sm shadow-sm"
          />
        </div>
      </div>

      {isInvalidRange && (
        <p className="text-red-600 font-semibold mb-4">
          ‚ùå Ng√†y k·∫øt th√∫c kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° ng√†y h√¥m nay ({today}).
        </p>
      )}

      <div className="space-y-4">
        {!isInvalidRange && isFiltered && filteredData?.length > 0 && (
          <p className="font-semibold text-green-700">
            üìå C√≥ {filteredData.length} k·∫øt qu·∫£ ƒë∆∞·ª£c t√¨m th·∫•y.
          </p>
        )}

        {!isInvalidRange && !isFiltered ? (
          <p className="italic text-gray-500">
            üîç Vui l√≤ng ch·ªçn kho·∫£ng th·ªùi gian ho·∫∑c nh·∫≠p th√¥ng tin ƒë·ªÉ xem l·ªãch s·ª≠.
          </p>
        ) : !isInvalidRange && filteredData?.length === 0 ? (
          <p className="italic text-gray-500">
            Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p v·ªõi ƒëi·ªÅu ki·ªán ƒë√£ ch·ªçn.
          </p>
        ) : (
          filteredData?.map((item) => (
            <div key={item.id} className="border border-gray-200 rounded-lg p-4 bg-gray-50 shadow-sm">
              <div className="flex justify-between items-center mb-1">
                <strong className="text-base" style={{ color: "oklch(0.577 0.245 27.325)" }}>
                  {item.type}
                </strong>
                <span className="text-sm text-gray-500">
                  {new Date(item.date).toLocaleDateString("vi-VN")}
                </span>
              </div>
              <p className="text-gray-700 text-sm">{item.description}</p>
            </div>
          ))
        )}
      </div>
    </div>
  );
}
