import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { History as HistoryIcon, FileText, BookOpen, FileDown, Filter, Info, Calendar } from 'lucide-react';


export default function History() {
  const today = new Date().toISOString().split('T')[0];

  const [fromDate, setFromDate] = useState('');
  const [toDate, setToDate] = useState('');
  const [searchInput, setSearchInput] = useState('');
  const [filterType, setFilterType] = useState('');
  const [isFiltered, setIsFiltered] = useState(false);
  const [isLoading, setIsLoading] = useState(true);

  const mockHistory = [
    {
      id: 1,
      date: '2025-04-10',
      type: 'Kh√°m ƒë·ªãnh k·ª≥',
      description: 'Kh√°m s·ª©c kh·ªèe t·ªïng qu√°t, x√©t nghi·ªám CD4: 520 t·∫ø b√†o/mm¬≥, t·∫£i l∆∞·ª£ng virus: Kh√¥ng ph√°t hi·ªán.',
      doctor: 'BS. Nguy·ªÖn VƒÉn C',
      status: 'Ho√†n th√†nh',
    },
    {
      id: 2,
      date: '2025-03-02',
      type: 'ƒê∆°n thu·ªëc',
      description: 'ARV: TDF + 3TC + EFV. C·∫•p thu·ªëc 1 th√°ng.',
      doctor: 'BS. Tr·∫ßn Th·ªã D',
      status: 'Ho√†n th√†nh',
    },
    {
      id: 3,
      date: '2025-01-15',
      type: 'T∆∞ v·∫•n ƒëi·ªÅu tr·ªã',
      description: 'T∆∞ v·∫•n tu√¢n th·ªß ƒëi·ªÅu tr·ªã v√† dinh d∆∞·ª°ng.',
      doctor: 'BS. L√™ VƒÉn E',
      status: 'Ho√†n th√†nh',
    },
  ];

  const isInvalidRange = toDate && new Date(toDate) > new Date(today);

  useEffect(() => {
    setTimeout(() => setIsLoading(false), 1000); // Gi·∫£ l·∫≠p loading
  }, []);

  const handleFilterChange = (setter) => (e) => {
    setter(e.target.value);
    setIsFiltered(true);
  };

  const handleSearchChange = (e) => {
    setSearchInput(e.target.value);
    setIsFiltered(true);
  };

  const handleFilterTypeChange = (e) => {
    console.log('Filter type changed to:', e.target.value); // Debug
    setFilterType(e.target.value);
    setIsFiltered(true);
  };

  const filterByDateAndSearch = (entries) => {
    return entries.filter((entry) => {
      const entryDate = new Date(entry.date);
      const inRange =
        (!fromDate || entryDate >= new Date(fromDate)) &&
        (!toDate || entryDate <= new Date(toDate));
      const matchesSearch =
        !searchInput ||
        entry.id.toString() === searchInput ||
        entry.date === searchInput;
      const matchesType = !filterType || entry.type === filterType;

      return inRange && matchesSearch && matchesType;
    });
  };

  const filteredData = filterByDateAndSearch(mockHistory);

  const handleExportPDF = () => {
    alert('Ch·ª©c nƒÉng xu·∫•t PDF ƒëang ph√°t tri·ªÉn!');
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-red-50 to-white py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-4xl mx-auto space-y-6">
        <div className="text-center animate-fade-in">
          <h2 className="text-3xl sm:text-4xl font-bold text-red-600">L·ªãch s·ª≠ kh√°m & ƒëi·ªÅu tr·ªã</h2>
          <p className="mt-2 text-lg text-gray-600">
            Xem l·∫°i c√°c l·∫ßn kh√°m, ƒë∆°n thu·ªëc v√† qu√° tr√¨nh ƒëi·ªÅu tr·ªã HIV
          </p>
        </div>

        <div className="bg-white rounded-2xl shadow-lg p-6 opacity-0 translate-y-4 animate-fade-in [animation-delay:0.2s]">
          {isLoading ? (
            <div className="space-y-6">
              {[...Array(3)].map((_, idx) => (
                <div key={idx} className="animate-pulse">
                  <div className="h-6 bg-gray-200 rounded w-1/2 mb-2"></div>
                  <div className="h-4 bg-gray-200 rounded w-full"></div>
                  <div className="h-4 bg-gray-200 rounded w-3/4 mt-2"></div>
                </div>
              ))}
            </div>
          ) : (
            <>
              <div className="flex flex-col sm:flex-row gap-4 mb-6">
                <div className="relative flex-1">
                  <label className="block text-sm font-semibold text-gray-600 mb-1">
                    T·ª´ ng√†y
                  </label>
                  <div className="flex items-center border border-gray-300 rounded-lg focus-within:ring-2 focus-within:ring-red-500">
                    <Calendar className="w-5 h-5 text-gray-400 mx-3" />
                    <input
                      type="date"
                      value={fromDate}
                      onChange={handleFilterChange(setFromDate)}
                      max={today}
                      className="w-full p-3 border-none rounded-lg focus:outline-none"
                    />
                  </div>
                </div>
                <div className="relative flex-1">
                  <label className="block text-sm font-semibold text-gray-600 mb-1">
                    ƒê·∫øn ng√†y
                  </label>
                  <div className="flex items-center border border-gray-300 rounded-lg focus-within:ring-2 focus-within:ring-red-500">
                    <Calendar className="w-5 h-5 text-gray-400 mx-3" />
                    <input
                      type="date"
                      value={toDate}
                      onChange={handleFilterChange(setToDate)}
                      max={today}
                      className="w-full p-3 border-none rounded-lg focus:outline-none"
                    />
                  </div>
                </div>
                <div className="relative flex-1">
                  <label className="block text-sm font-semibold text-gray-600 mb-1">
                    Nh·∫≠p ID ho·∫∑c ng√†y
                  </label>
                  <div className="flex items-center border border-gray-300 rounded-lg focus-within:ring-2 focus-within:ring-red-500">
                    <Filter className="w-5 h-5 text-gray-400 mx-3" />
                    <input
                      type="text"
                      placeholder="VD: 1 ho·∫∑c 2025-03-02"
                      value={searchInput}
                      onChange={handleSearchChange}
                      className="w-full p-3 border-none rounded-lg focus:outline-none"
                    />
                  </div>
                </div>
                <div className="relative flex-1">
                  <label className="block text-sm font-semibold text-gray-600 mb-1">
                    Lo·∫°i
                  </label>
                  <div className="flex items-center border border-gray-300 rounded-lg focus-within:ring-2 focus-within:ring-red-500">
                    <Filter className="w-5 h-5 text-gray-400 mx-3" />
                    <select
                      value={filterType}
                      onChange={handleFilterTypeChange}
                      className="w-full p-3 border-none rounded-lg focus:outline-none appearance-none"
                    >
                      <option value="">T·∫•t c·∫£</option>
                      <option value="Kh√°m ƒë·ªãnh k·ª≥">Kh√°m ƒë·ªãnh k·ª≥</option>
                      <option value="ƒê∆°n thu·ªëc">ƒê∆°n thu·ªëc</option>
                      <option value="T∆∞ v·∫•n ƒëi·ªÅu tr·ªã">T∆∞ v·∫•n ƒëi·ªÅu tr·ªã</option>
                    </select>
                  </div>
                </div>
              </div>

              {isInvalidRange && (
                <p className="text-red-600 font-semibold mb-4">
                  ‚ùå Ng√†y k·∫øt th√∫c kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° ng√†y h√¥m nay ({today}).
                </p>
              )}

              <div className="space-y-4">
                {isFiltered && !isInvalidRange && filteredData.length > 0 && (
                  <p className="font-bold text-gray-700">
                    üìå C√≥ {filteredData.length} k·∫øt qu·∫£ ƒë∆∞·ª£c t√¨m th·∫•y.
                  </p>
                )}

                {!isFiltered ? (
                  <p className="italic text-gray-500">
                    üîç Vui l√≤ng ch·ªçn kho·∫£ng th·ªùi gian ho·∫∑c nh·∫≠p th√¥ng tin ƒë·ªÉ xem l·ªãch s·ª≠.
                  </p>
                ) : !isInvalidRange && filteredData.length === 0 ? (
                  <p className="italic text-gray-500">Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p v·ªõi ƒëi·ªÅu ki·ªán ƒë√£ ch·ªçn.</p>
                ) : (
                  filteredData.map((item) => (
                    <div
                      key={item.id}
                      className="bg-white rounded-xl shadow-md p-4 hover:shadow-lg transition-shadow duration-300"
                    >
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center gap-2">
                          {item.type === 'Kh√°m ƒë·ªãnh k·ª≥' && <History className="w-5 h-5 text-red-500" />}
                          {item.type === 'ƒê∆°n thu·ªëc' && <FileText className="w-5 h-5 text-red-500" />}
                          {item.type === 'T∆∞ v·∫•n ƒëi·ªÅu tr·ªã' && <BookOpen className="w-5 h-5 text-red-500" />}
                          <strong className="text-gray-800">{item.type}</strong>
                        </div>
                        <span className="text-sm text-gray-500">
                          {new Date(item.date).toLocaleDateString('vi-VN')}
                        </span>
                      </div>
                      <p className="text-gray-600">{item.description}</p>
                      <p className="text-sm text-gray-500 mt-1">B√°c sƒ©: {item.doctor}</p>
                      <p className="text-sm text-gray-500">Tr·∫°ng th√°i: {item.status}</p>
                      <div className="flex gap-2 mt-3">
                        <Link
                          to={`/history/${item.id}`}
                          className="inline-flex items-center gap-1 px-3 py-1 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors duration-300"
                        >
                          <Info className="w-4 h-4" />
                          Xem chi ti·∫øt
                        </Link>
                        <button
                          onClick={handleExportPDF}
                          className="inline-flex items-center gap-1 px-3 py-1 border border-red-600 text-red-600 rounded-lg hover:bg-red-100 transition-colors duration-300"
                        >
                          <FileDown className="w-4 h-4" />
                          Xu·∫•t PDF
                        </button>
                      </div>
                    </div>
                  ))
                )}
              </div>
            </>
          )}
        </div>
      </div>
    </div>
  );
}